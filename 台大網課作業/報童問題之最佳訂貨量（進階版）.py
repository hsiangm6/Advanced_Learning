"""報童問題之最佳訂貨量（進階版）
本題是第四週作業「報童問題：該買幾份報紙？」的進階版，演算規則與該題大同小異（新增了報紙沒賣完可以當廢紙賣掉的殘值），
輸入資訊亦有不同（題目會給定殘值資訊，且機率值個數 NN 不再僅限於 8），而輸出格式則一樣。為了方便起見，以下我們列出完整的題目敘述。

題目敘述
你經營一家報攤專賣一份日報，今天下午你得在報社關門前下訂單，告訴報社你要為明天訂購幾份報紙，隔天清晨你就會收到訂購的報紙並且付款。
每份報紙的進貨價格是 c 元，賣給客人的零售價則是 r 元，而每一份沒賣出去的報紙，在明天結束時可以被以一份 s 元的殘值（salvage value）當作廢紙賣掉。
每天會來多少個客人想買報紙是件不確定的事，也就是說單日需求量 D 是隨機的。根據過往經驗，你估計明天的單日需求量會落在 0 和 N 之間，並且符合如下的機率分佈：
意思是說，有 0 個人來買報紙的機率是 p0、有 1 個人來買報紙的機率是 p1，依此類推，最後是賣出 N 份報紙的機率是 pN。你想要決定你的訂貨量 q∗去最大化你的期望利潤（expected profit）

在這題中，你將會被給定 c、r、N、s、p0、p1直到 pN的值。你的任務是找出能最大化預期利潤的最佳訂貨量 q∗，以及在此訂貨量之下能得到的預期利潤π(q∗) 無條件捨去到整數位。
以本題的例子而言，就是 5 跟 20（請自己試著算算看；你會發現因為有了殘值，你會想要訂得多一點）。如果有數個訂貨量會導致一模一樣的預期利潤（是預期利潤一樣，不是無條件捨去之後一樣！）
，請用比較小的那一個當最佳訂貨量。

輸入輸出格式
在每筆測試資料中，會有N+5列，每一列都有一個數字。第一列的整數是單位進貨成本 c、第二列的整數是單位零售價格 r、第三列的整數是需求的可能個數 N、第四列是殘值s、第五列開始的小數則依序是賣出零份
、一份直到 N 份報紙的機率（也就是說對於 i=4,5,...,N+4，第 i 列記錄的是賣出i−4 份報紙的機率）。已知 c 會落在 1 到 100 之間（包含 1 跟 100）、r 會落在 1 到 100 之間（包含 1 跟 100）
且不會比 c 小、s 會落在 1 到 100 之間（包含 1 跟 100）且不會比 c 大、N會落在 1 到 1000 之間（包含 1 和 1000）。此外，對於i=0,1,...,N，pi會介於 0 到 1 之間（包含 0 跟 1）、最多只有兩位小數，
讀入這些資料之後，你會計算並輸出在給定訂購量下的預期利潤無條件捨去到整數 \lfloor \pi(q) \rfloor⌊π(q)⌋。"""
cost=int(input()) #cost是單價成本  2
price=int(input()) #price是單位售價  10
n=int(input()) #購買可能數   10
s=int(input()) #殘值:每一份沒賣出去的報紙，在明天結束時可以被以一份 s 元的殘值（salvage value）當作廢紙賣掉   1
bestPro=0.0    #最佳利潤
bestq=0        #最佳訂貨量
sum=0.0        #目前累積總利潤
#pro=0.0        #累積機率

#set up list
p=[]
for i in range(n+1):   
    p.append(float(input()))

#process
for q in range(n+1):                 #q是店家訂貨量
    sum=0.0
    pro=0.0
    for i in range(q+1):             #i是單日需求量
        if i != q:
            sum=sum+(i*price-q*cost+(q-i)*s)*p[i]
            pro+=p[i]                #題目中有提供到n前的所有機率，如果i>q且沒有pro來計算累積機率，會有輸入的機率沒有加到應有機率的地方
        else:
            sum=sum+(i*price-q*cost)*(1-pro)
            break
    if sum>bestPro:
        bestPro=sum
        bestq=q

#conclusion
print(bestq,int(bestPro))